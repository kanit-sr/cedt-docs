Problem
A company has n employees numbered from 1 to n. Each employee either has no immediate manager or exactly one immediate manager, who is another employee with a different number. An employee A is said to be the superior of another employee B if at least one of the following is true:

Employee A is the immediate manager of employee B
Employee B has an immediate manager employee C such that employee A is the superior of employee C.
The company will not have a managerial cycle. That is, there will not exist an employee who is the superior of his/her own immediate manager.

Today the company is going to arrange a party. This involves dividing all n employees into several groups: every employee must belong to exactly one group. Furthermore, within any single group, there must not be two employees A and B such that A is the superior of B.

What is the minimum number of groups that must be formed?

Input
The first line contains integer n (1 ≤ n ≤ 2000) — the number of employees.

The next n lines contain the integers pi (1 ≤ pi ≤ n or pi = -1). Every pi denotes the immediate manager for the i-th employee. If pi is -1, that means that the i-th employee does not have an immediate manager.

It is guaranteed, that no employee will be the immediate manager of him/herself (pi ≠ i). Also, there will be no managerial cycles.

Output
Print a single integer denoting the minimum number of groups that will be formed in the party.

Examples
Inputcopy	Outputcopy
5
-1
1
2
1
-1
3
Note
For the first example, three groups are sufficient, for example:

Employee 1
Employees 2 and 4
Employees 3 and 5

---

// this one I figure its out that, the minimum of group we could create is the maximum height in the tree.

so I build function that find maxdepths in tree using DFS.

----

#include <bits/stdc++.h>
using namespace std;
#define ll long long

int cal_depth(int n , const vector<int>& em , vector<int>& depth){
	
	//base
	if(n == -1)
		return 0;
		
	if(depth[n] != 0){
		return depth[n];
	}
	
	depth[n] = cal_depth(em[n],em,depth) + 1;
	return depth[n];
}

int main()
{
	int n ;
	cin >> n;
	
	vector<int> em(n+1);
	vector<int> depth(n+1, 0);
	
	for(int i = 1 ;i <= n ;i++){
		cin >> em[i];
	}
	
	
	int maxdepth = 0;
	
	for(int i = 1 ; i <= n ; i++){
		maxdepth = max(maxdepth, cal_depth(i,em,depth));
	}
	
	
	cout << maxdepth;
	



	return 0;
}
